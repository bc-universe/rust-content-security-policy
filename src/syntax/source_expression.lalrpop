use syntax::types;
use std::str::FromStr;

grammar;

// https://www.w3.org/TR/CSP/#framework-directive-source-list

pub SourceExpression: types::Source<'input> = {
  Scheme => types::Source::Scheme(<>),
  Host => types::Source::Host(<>),
  Nonce => types::Source::Nonce(<>),
  Sha256 => types::Source::Sha256(<>),
  Sha384 => types::Source::Sha384(<>),
  Sha512 => types::Source::Sha512(<>),
  "'self'" => types::Source::Self_,
  "'unsafe-inline'" => types::Source::UnsafeInline,
  "'unsafe-eval'" => types::Source::UnsafeEval,
  "'strict-dynamic'" => types::Source::StrictDynamic,
  "'unsafe-hashed-attributes'" => types::Source::UnsafeHashedAttributes,
};

pub AncestorSource: types::Ancestor<'input> = {
  Scheme => types::Ancestor::Scheme(<>),
  Host => types::Ancestor::Host(<>),
  "'self'" => types::Ancestor::Self_,
};

Nonce: &'input str = r"'nonce\-[a-zA-Z0-9\+/\-_]+=?=?'"
  => &<>[7..<>.len()-1];

Sha256: &'input str = r"'sha256\-[a-zA-Z0-9\+/\-_]+=?=?'"
  => &<>[8..<>.len()-1];

Sha384: &'input str = r"'sha384\-[a-zA-Z0-9\+/\-_]+=?=?'"
  => &<>[8..<>.len()-1];

Sha512: &'input str = r"'sha512\-[a-zA-Z0-9\+/\-_]+=?=?'"
  => &<>[8..<>.len()-1];

Scheme: &'input str = r"[a-zA-Z]([a-zA-Z]|[0-9]|\+|\-|\.)*:"
  => &<>[..<>.len()-1];

// Just as a reminder, this is not a regex for matching URLs.
// The CSP specification defines a URL-like representation for "host sources",
// but does not allow query strings (as in http://example.com?query=string),
// and allows bare domain names (as in example.com) and weird wildcard things.
Host: &'input str =
  r"([a-zA-Z]([a-zA-Z]|[0-9]|\+|\-|\.)*://)?(\*\.)?[a-zA-Z0-9\-_]+(\.[a-zA-Z0-9\-_]+)*(:\*|:[0-9]+)?(/([a-zA-Z0-9\-\._~]|%[0-9a-fA-F][0-9a-fA-F])*)*"
    => <>;
