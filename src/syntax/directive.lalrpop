use syntax::media_type;
use syntax::source_expression;
use syntax::types;

grammar;

// https://www.w3.org/TR/CSP/#parse-serialized-policy
pub DirectiveSet: types::DirectiveSet<'input> = {
  "" => types::DirectiveSet::new(),
  Directive => types::DirectiveSet::with(<>),
  <Directive> ";" => types::DirectiveSet::with(<>),
  // Iterating backwards over the set is a simple way to implement the
  // "first-directive-wins" behavior that the spec mandates.
  <d:Directive> ";" <s:DirectiveSet> => {let mut s = s; s.add_directive(d); s},
};

// https://www.w3.org/TR/CSP/#csp-directives
pub Directive: types::Directive<'input> = {
  "child-src" <SourceExpressionList> => types::Directive::ChildSrc(<>),
  "connect-src" <SourceExpressionList> => types::Directive::ConnectSrc(<>),
  "default-src" <SourceExpressionList> => types::Directive::DefaultSrc(<>),
  "font-src" <SourceExpressionList> => types::Directive::FontSrc(<>),
  "frame-src" <SourceExpressionList> => types::Directive::FrameSrc(<>),
  "img-src" <SourceExpressionList> => types::Directive::ImgSrc(<>),
  "manifest-src" <SourceExpressionList> => types::Directive::ManifestSrc(<>),
  "media-src" <SourceExpressionList> => types::Directive::MediaSrc(<>),
  "object-src" <SourceExpressionList> => types::Directive::ObjectSrc(<>),
  "script-src" <SourceExpressionList> => types::Directive::ScriptSrc(<>),
  "style-src" <SourceExpressionList> => types::Directive::StyleSrc(<>),
  "worker-src" <SourceExpressionList> => types::Directive::WorkerSrc(<>),
  "base-uri" <SourceExpressionList> => types::Directive::BaseUri(<>),
  "plugin-types" <MediaType+> => types::Directive::PluginTypes(<>),
  "sandbox" r"[^\s;]+"* => types::Directive::Sandbox,
  "disown-opener" r"[^\s;]+"* => types::Directive::DisownOpener,
  "form-action" <SourceExpressionList> => types::Directive::FormAction(<>),
  "frame-ancestors" <AncestorSourceList> => types::Directive::FrameAncestors(<>),
};

// https://www.w3.org/TR/CSP/#grammardef-serialized-source-list

pub SourceExpressionList: Vec<types::Source<'input>> = {
  <SourceExpression+>,
  "'none'" => Vec::new(),
};

pub AncestorSourceList: Vec<types::Ancestor<'input>> = {
  <AncestorSource+>,
  "'none'" => Vec::new(),
};

SourceExpression: types::Source<'input> = r"[^\s;]+"
  =>? source_expression::parse_SourceExpression(<>);

AncestorSource: types::Ancestor<'input> = r"[^\s;]+"
  =>? source_expression::parse_AncestorSource(<>);

MediaType: &'input str = r"[^\s;]+"
  =>? media_type::parse_MediaType(<>);
